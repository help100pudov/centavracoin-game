import N from"./ship-85dd592b.js";import{_ as W,k as C,l as L,m as B,j as G,c,a,F as x,r as b,t as h,f as T,b as g,d as V,o as u,n as k}from"./index-f7d62f39.js";import $ from"./enemy-a43a4989.js";import{t as z,g as R}from"./tonconnect-0a311c7b.js";const F="/assets/shipbullet-ebc43028.mp3";const K={mixins:[z],data(){return{resources:{gold:0,silver:0,copper:0,iron:0},meteors:[],meteorTypes:["gold","silver","copper","iron"],enemies:[],bullets:[],enemyBullets:[],ship:{x:0,y:0,width:60,height:60,image:null,weapon:1,health:10},lastShotTime:0,shotInterval:300,canvas:null,ctx:null,animationFrameId:null,selectedShipIndex:0,shipImageWidth:213,shipImageHeight:256,columns:6,rows:5,resourceImageSize:40,meteorFallSpeed:1,enemyHealth:3,enemySpawnInterval:null,enemySpawnTimer:null,shipHealthPercent:100,gameOver:!1,images:{gold:C,silver:L,iron:B,copper:G,enemy:$,bullet:C,enemyBullet:L},selectedAutopilot:{duration:9999},autopilotStatus:null,user:null,walletAddress:null,toast:null,tonKeeperEnabled:!1,tonKeeperInitialized:!1,tonConnectUI:null,showAutopilotModal:!1,autopilotPlans:[{id:1,name:"1 Day Plan",price:{}.VUE_APP_AUTOPILOT_DAY_PRICE||.1,duration:"1 Day",bonus:{}.VUE_APP_AUTOPILOT_DAY_BONUS||1,popular:!1},{id:2,name:"1 Month Plan",price:{}.VUE_APP_AUTOPILOT_MONTH_PRICE||1,duration:"1 Month",bonus:{}.VUE_APP_AUTOPILOT_MONTH_BONUS||2,popular:!0},{id:3,name:"Until 2026",price:{}.VUE_APP_AUTOPILOT_YEAR_PRICE||2,duration:"Until 2026",bonus:{}.VUE_APP_AUTOPILOT_YEAR_BONUS||3,popular:!1},{id:4,name:"Super Autopilot",price:{}.VUE_APP_AUTOPILOT_LIFETIME_PRICE||5,duration:"Lifetime",bonus:{}.VUE_APP_AUTOPILOT_LIFETIME_BONUS||5,popular:!1}],selectedPlan:null,processingPayment:!1,activePlan:null,showManualInputOption:!1}},mounted(){var e;console.log("[GAME] Component mounted, user:",this.user),console.log("[GAME] Store state:",(e=this.$store)==null?void 0:e.state),console.log("[GAME] Environment variables check:",{hotWallet:{}.VUE_APP_HOT_WALLET_ADDRESS,centaJetton:{}.VUE_APP_CENTA_JETTON_ADDRESS,autopilotBaseCenta:{}.VUE_APP_AUTOPILOT_BASE_CENTA,dayPrice:{}.VUE_APP_AUTOPILOT_DAY_PRICE,monthPrice:{}.VUE_APP_AUTOPILOT_MONTH_PRICE}),this.$toast?this.toast=this.$toast:this.$toastification&&(this.toast=this.$toastification),this.loadShipImage(),this.loadResourceImages(),this.initGame(),this.initUser(),this.$store&&this.$store.dispatch("fetchUserData"),this.initTonKeeper()},beforeUnmount(){this.cleanupGame()},methods:{async initTonKeeper(){try{console.log("[GAME] Starting TON Connect initialization..."),typeof R=="function"?(this.tonConnectUI=R(),console.log("[GAME] TON Connect UI created:",!!this.tonConnectUI),this.tonConnectUI&&this.tonConnectUI.onStatusChange?(this.tonConnectUI.onStatusChange(e=>{var t;console.log("[GAME] TON Connect status changed:",e),this.isConnected=!!e,this.walletAddress=((t=e==null?void 0:e.account)==null?void 0:t.address)||"",this.tonKeeperEnabled=!!e,this.tonKeeperInitialized=!!e,console.log("[GAME] Wallet address set to:",this.walletAddress),console.log("[GAME] TON Connect status:",{isConnected:this.isConnected,walletAddress:this.walletAddress,tonKeeperEnabled:this.tonKeeperEnabled,tonKeeperInitialized:this.tonKeeperInitialized})}),console.log("[GAME] TON Connect initialized successfully")):console.warn("[GAME] TON Connect UI missing onStatusChange method")):(console.warn("[GAME] TON Connect not available"),this.tonKeeperEnabled=!1,this.tonKeeperInitialized=!1)}catch(e){console.error("[GAME] TON Connect initialization failed:",e),this.tonKeeperEnabled=!1,this.tonKeeperInitialized=!1,this.toast&&this.toast.error("TON Connect initialization error: "+e.message,{timeout:5e3})}},async toggleAutopilot(){this.autopilotActive?this.stopAutopilot():await this.startAutopilot()},async startAutopilot(){try{this.autopilotStatus="Autopilot activated! Running...",this.autopilotActive=!0,this.startAutopilotLogic(),console.log("[AUTOPILOT] Started with plan:",this.activePlan),this.activePlan&&this.showBonusInfo()}catch(e){console.error("[AUTOPILOT] Error starting autopilot:",e),this.autopilotStatus=`Error: ${e.message}`}},showBonusInfo(){const e=this.activePlan,t=e.bonus;this.autopilotStatus=`🚀 ${e.name} Active! x${t} Efficiency`,this.toast&&this.toast.success(`🚀 Autopilot activated! x${t} efficiency bonus applied!`,{timeout:5e3}),console.log(`[AUTOPILOT] Plan activated: ${e.name} with x${t} efficiency`)},stopAutopilot(){this.autopilotActive=!1,this.autopilotStatus="Autopilot stopped",this.autopilotInterval&&(clearInterval(this.autopilotInterval),this.autopilotInterval=null),console.log("[AUTOPILOT] Stopped")},startAutopilotLogic(){this.autopilotInterval=setInterval(()=>{this.autopilotActive&&this.tonKeeperInitialized&&this.runAutopilotLogic()},100)},runAutopilotLogic(){if(!this.canvas||this.gameOver)return;const e=this.activePlan?this.activePlan.bonus:1,t=4*e,s=50+e*10,o=Math.max(100,300-e*50);if(this.ship.health<3){this.autoHealStrategy();return}this.enemies.length>0&&this.autoDodgeEnemies(),this.autoCollectValuableMeteors(s),this.autoMoveToBestTarget(t),this.autoShoot(o),this.autoCollectMeteors(s)},autoHealStrategy(){const e=this.canvas.height-150;this.ship.y>e&&(this.ship.y=Math.max(e,this.ship.y-2)),this.autoDodgeEnemies()},autoCollectValuableMeteors(e){const t=["gold","silver","copper","iron"];for(const s of t){const o=this.meteors.filter(i=>i.type===s);for(const i of o)if(Math.sqrt(Math.pow(this.ship.x-i.x,2)+Math.pow(this.ship.y-i.y,2))<e){const n=this.calculateReward(i,"autopilot");this.resources[i.type]+=i.mass;const r=this.meteors.indexOf(i);r>-1&&this.meteors.splice(r,1),this.user&&i.token&&(this.user[i.type]+=i.mass),console.log(`[AUTOPILOT] Collected ${i.type} meteor: ${i.mass}kg = ${n} nCENTA`)}}},calculateReward(e,t="manual"){let s=1;t==="autopilot"&&(s*=.6);const o=this.getDeviceMultiplier();s*=o;const i=this.getSkillMultiplier();s*=i;const l=this.getStreakMultiplier();s*=l;const n=this.applyDailyLimits(e.value*s);return Math.round(n)},getDeviceMultiplier(){const e=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),t=this.detectGPU();return e?1:t?1.1:1.05},detectGPU(){try{const e=document.createElement("canvas"),t=e.getContext("webgl")||e.getContext("experimental-webgl");if(t){const s=t.getExtension("WEBGL_debug_renderer_info");if(s){const o=t.getParameter(s.UNMASKED_RENDERER_WEBGL);return o.toLowerCase().includes("gpu")||o.toLowerCase().includes("radeon")||o.toLowerCase().includes("geforce")}}}catch(e){console.log("[DEVICE] GPU detection failed:",e)}return!1},getSkillMultiplier(){const e=Date.now(),t=this.bullets.filter(s=>e-s.timestamp<5e3).length;return t>10?1.15:t>5?1:.9},getStreakMultiplier(){this.streakData||(this.streakData={startTime:Date.now(),hours:0});const t=(Date.now()-this.streakData.startTime)/(1e3*60*60);return Math.min(1.3,1+t*.02)},applyDailyLimits(e){this.dailyRewards||(this.dailyRewards={total:0,lastReset:Date.now()});const t=Date.now();if((t-this.dailyRewards.lastReset)/(1e3*60*60)>=24&&(this.dailyRewards.total=0,this.dailyRewards.lastReset=t),this.dailyRewards.total>=50)return 0;let o=e;if(this.dailyRewards.total>30){const i=this.dailyRewards.total-30;o*=Math.pow(.5,i/10)}return this.dailyRewards.total+=o,o},autoMoveToBestTarget(e){if(this.meteors.length===0)return;let t=null,s=-1/0;const o={gold:4,silver:3,iron:2,copper:1};for(const i of this.meteors){const l=Math.sqrt(Math.pow(this.ship.x-i.x,2)+Math.pow(this.ship.y-i.y,2)),n=o[i.type]/(l+1);n>s&&(s=n,t=i)}if(t){const i=t.x,l=this.ship.x;Math.abs(i-l)>3&&(i>l?this.ship.x=Math.min(i,l+e):this.ship.x=Math.max(i,l-e)),this.ship.x=Math.max(this.ship.width/2,Math.min(this.ship.x,this.canvas.width-this.ship.width/2))}},autoShoot(e){if(this.meteors.length===0)return;let t=null,s=1/0;for(const o of this.meteors){const i=Math.sqrt(Math.pow(this.ship.x-o.x,2)+Math.pow(this.ship.y-o.y,2));i<s&&(s=i,t=o)}t&&t.y<this.ship.y-50&&this.createBullet()},autoCollectMeteors(e){for(let t=this.meteors.length-1;t>=0;t--){const s=this.meteors[t];if(Math.sqrt(Math.pow(this.ship.x-s.x,2)+Math.pow(this.ship.y-s.y,2))<e){const i=this.calculateReward(s,"autopilot");this.resources[s.type]+=s.mass,this.meteors.splice(t,1),this.user&&s.token&&(this.user[s.type]+=s.mass),console.log(`[AUTOPILOT] Collected ${s.type}: ${s.mass}kg = ${i} nCENTA`)}}},autoDodgeEnemies(){for(const e of this.enemies)if(Math.abs(this.ship.x-e.x)<80){const s=e.x>this.ship.x?-1:1;this.ship.x+=s*5,this.ship.x=Math.max(this.ship.width/2,Math.min(this.ship.x,this.canvas.width-this.ship.width/2))}},async initUser(){var e;try{if(console.log("[GAME] Starting user initialization..."),console.log("[GAME] Store exists:",!!this.$store),console.log("[GAME] Store state:",(e=this.$store)==null?void 0:e.state),this.$store&&this.$store.state.user)this.user=this.$store.state.user,console.log("[GAME] User from store:",this.user);else if(console.log("[GAME] No user in store, trying Telegram..."),typeof this.getTelegramUser=="function"){const t=this.getTelegramUser();console.log("[GAME] Telegram user:",t),t?(this.user={id:t.id,chat:t.id,user:t.id,first:t.first_name||"User",last:t.last_name||"",gold:0,silver:0,copper:0,iron:0,wallet_address:null},console.log("[GAME] Created user from Telegram:",this.user)):console.log("[GAME] No Telegram user found")}else console.log("[GAME] getTelegramUser function not available");this.user||(console.log("[GAME] Creating default test user..."),this.user={id:1,chat:"test_user",user:"test_user",first:"Test",last:"User",gold:0,silver:0,copper:0,iron:0,wallet_address:null},console.log("[GAME] Created default test user")),console.log("[GAME] Final user state:",this.user),console.log("[GAME] User chat field:",this.user.chat),console.log("[GAME] User user field:",this.user.user),console.log("[GAME] User id field:",this.user.id)}catch(t){console.error("[GAME] Error initializing user:",t),this.user={id:1,chat:"error_user",user:"error_user",first:"Error",last:"User",gold:0,silver:0,copper:0,iron:0,wallet_address:null}}},async createToken(e){try{return await this.$post("/game",{act:"token",key:e})}catch(t){return console.error("Error creating token:",t),null}},async checkToken(e){try{return await this.$post("/game",{act:"check",key:e})}catch(t){return console.error("Error checking token:",t),null}},initGame(){this.canvas=this.$refs.gameCanvas,this.canvas?(this.ctx=this.canvas.getContext("2d"),this.ctx?(this.resizeCanvas(),this.ship.x=this.canvas.width/2,this.ship.y=this.canvas.height-100,this.startEnemySpawnTimer(),window.addEventListener("resize",this.resizeCanvas),this.canvas.addEventListener("mousemove",this.moveShip),this.canvas.addEventListener("touchmove",this.moveShipTouch),this.gameLoop=this.gameLoop.bind(this),this.animationFrameId=requestAnimationFrame(this.gameLoop)):console.error("Не удалось получить контекст canvas")):console.error("Canvas элемент не найден")},cleanupGame(){window.removeEventListener("resize",this.resizeCanvas),this.canvas&&(this.canvas.removeEventListener("mousemove",this.moveShip),this.canvas.removeEventListener("touchmove",this.moveShipTouch)),cancelAnimationFrame(this.animationFrameId),this.stopEnemySpawnTimer()},restartGame(){this.cleanupGame(),this.resources={gold:0,silver:0,copper:0,iron:0},this.meteors=[],this.enemies=[],this.bullets=[],this.enemyBullets=[],this.ship.health=10,this.shipHealthPercent=100,this.gameOver=!1,this.initGame()},resizeCanvas(){this.canvas&&(this.canvas.width=Math.min(window.innerWidth,500),this.canvas.height=window.innerHeight)},moveShip(e){this.canvas&&(this.ship.x=e.clientX,this.ship.x=Math.max(this.ship.width/2,Math.min(this.ship.x,this.canvas.width-this.ship.width/2)))},moveShipTouch(e){if(this.canvas){const t=e.touches[0];this.ship.x=t.clientX,this.ship.x=Math.max(this.ship.width/2,Math.min(this.ship.x,this.canvas.width-this.ship.width/2))}},async createMeteor(){if(this.canvas)try{const e=this.calculateMeteorSpawn();let t=await this.createToken(e);if(t){const s=this.calculateMeteorYield(e),o=new D(Math.random()*this.canvas.width,-50,e,this.canvas.width,s.health,t,s.mass);this.meteors.push(o),this.updatePitySystem(e),console.log(`[METEOR] Spawned ${e} with ${s.mass}kg mass`)}}catch(e){console.error("Error creating meteor:",e);const t=new D(Math.random()*this.canvas.width,-50,"iron",this.canvas.width,3,null,10);this.meteors.push(t)}},calculateMeteorSpawn(){const e={gold:{spawn_weight:1,price_usd:108190,rarity:"ultra_rare"},silver:{spawn_weight:10,price_usd:1253,rarity:"rare"},copper:{spawn_weight:200,price_usd:9.812,rarity:"common"},iron:{spawn_weight:1e3,price_usd:.438,rarity:"very_common"}};if(this.shouldForceRareDrop())return this.selectRareMetal();const t=.9;let s=0;const o={};for(const[r,d]of Object.entries(e)){const y=d.spawn_weight/Math.pow(d.price_usd,t);o[r]=y,s+=y}const i={};for(const[r,d]of Object.entries(o))i[r]=d/s;const l=Math.random();let n=0;for(const[r,d]of Object.entries(i))if(n+=d,l<=n)return r;return"iron"},calculateMeteorYield(e){const s={gold:{mu:2,sigma:.6,min:.01,max:5},silver:{mu:3,sigma:.7,min:.05,max:20},copper:{mu:5,sigma:.9,min:1,max:300},iron:{mu:6,sigma:1,min:5,max:1e3}}[e],o=Math.random(),i=Math.random(),l=Math.sqrt(-2*Math.log(o))*Math.cos(2*Math.PI*i),n=Math.exp(s.mu+s.sigma*l),r=Math.max(s.min,Math.min(s.max,n)),d=Math.max(1,Math.floor(r/10)+1);return{mass:Math.round(r*100)/100,health:d}},updatePitySystem(e){this.pitySystem||(this.pitySystem={spawnCount:0,lastRareDrop:0,windowEvents:200}),this.pitySystem.spawnCount++,(e==="gold"||e==="silver")&&(this.pitySystem.lastRareDrop=this.pitySystem.spawnCount,console.log(`[PITY] Rare metal ${e} dropped, resetting pity counter`)),this.pitySystem.spawnCount-this.pitySystem.lastRareDrop>=this.pitySystem.windowEvents&&console.log(`[PITY] Pity system triggered after ${this.pitySystem.windowEvents} spawns`)},shouldForceRareDrop(){return this.pitySystem?this.pitySystem.spawnCount-this.pitySystem.lastRareDrop>=this.pitySystem.windowEvents:!1},selectRareMetal(){return Math.random()<.7?"silver":"gold"},formatResourceValue(e,t){const s={gold:10819e7,silver:1253e6,copper:9812e3,iron:438e3},o=t*(s[e]||s.iron);return o>=1e9?`${(o/1e9).toFixed(2)} CENTA`:o>=1e6?`${(o/1e6).toFixed(2)} mCENTA`:o>=1e3?`${(o/1e3).toFixed(2)} μCENTA`:`${o.toFixed(0)} nCENTA`},getPityProgress(){if(!this.pitySystem)return 0;const e=(this.pitySystem.spawnCount-this.pitySystem.lastRareDrop)/this.pitySystem.windowEvents*100;return Math.min(100,Math.max(0,e))},getPityText(){if(!this.pitySystem)return"";const e=this.pitySystem.spawnCount-this.pitySystem.lastRareDrop,t=this.pitySystem.windowEvents-e;return t<=0?"Rare drop guaranteed!":t<=20?`${t} spawns until rare drop`:`${t} spawns until pity`},getDailyProgress(){return this.dailyRewards?this.dailyRewards.total/50*100:0},createEnemy(){if(this.canvas){const e=Math.floor(Math.random()*5)+1,t=new H(Math.random()*this.canvas.width,-50,this.enemyHealth,e,this.canvas.width);this.enemies.push(t)}},createBullet(){if(Date.now()-this.lastShotTime>this.shotInterval&&this.canvas){let e=1,t=1;this.ship.weapon>=4&&this.ship.weapon<=6?(e=2,t=2):this.ship.weapon>=7&&this.ship.weapon<=10&&(e=3,t=3);for(let s=0;s<e;s++)this.playShipBullet(),this.bullets.push({x:this.ship.x+(s-(e-1)/2)*10,y:this.ship.y,damage:t,timestamp:Date.now()});this.lastShotTime=Date.now()}},gameLoop(){if(!(!this.ctx||!this.canvas||this.gameOver)){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),Math.random()<.02&&this.createMeteor(),Math.random()<5e-4&&this.createEnemy(),this.createBullet();for(let e=this.meteors.length-1;e>=0;e--){const t=this.meteors[e];t.update(this.meteorFallSpeed);const s=this.meteorTypes.indexOf(t.type),o=Object.values(this.images)[s];if(t.draw(this.ctx,o),this.checkCollision(this.ship,t)){const i=this.calculateReward(t,"manual");this.resources[t.type]+=t.mass,this.meteors.splice(e,1),console.log(`[COLLECTION] Collected ${t.type}: ${t.mass}kg = ${i} nCENTA`)}for(let i=this.bullets.length-1;i>=0;i--){const l=this.bullets[i];if(this.checkCollision(t,l)&&(t.takeDamage(l.damage),this.bullets.splice(i,1),t.health<=0)){const n=this.calculateReward(t,"manual");this.resources[t.type]+=t.mass,this.meteors.splice(e,1),this.checkToken(t.token),this.user&&t.token&&(this.user[t.type]+=t.mass),console.log(`[DESTRUCTION] Destroyed ${t.type}: ${t.mass}kg = ${n} nCENTA`);break}}}for(let e=this.enemies.length-1;e>=0;e--){const t=this.enemies[e];t.update(),t.draw(this.ctx,this.images.enemy);const s=t.shoot(this.ship.x,this.ship.y);s&&this.enemyBullets.push(s);for(let o=this.bullets.length-1;o>=0;o--){const i=this.bullets[o];if(this.checkCollision(t,i)&&(t.takeDamage(i.damage),this.bullets.splice(o,1),t.health<=0)){this.enemies.splice(e,1);break}}}for(let e=this.bullets.length-1;e>=0;e--){const t=this.bullets[e];t.y-=5,t.y<0?this.bullets.splice(e,1):this.ctx.drawImage(this.images.bullet,t.x-5,t.y-10,10,20)}for(let e=this.enemyBullets.length-1;e>=0;e--){const t=this.enemyBullets[e];t.x+=t.dx,t.y+=t.dy,t.y>this.canvas.height||t.x<0||t.x>this.canvas.width?this.enemyBullets.splice(e,1):this.ctx.drawImage(this.images.bullet,t.x-5,t.y-10,10,20),this.checkCollision(this.ship,t)&&(this.ship.health-=1,this.shipHealthPercent=this.ship.health/10*100,this.enemyBullets.splice(e,1),this.ship.health<=0&&(console.log("Корабль уничтожен!"),this.stopEnemySpawnTimer(),cancelAnimationFrame(this.animationFrameId),this.gameOver=!0));for(let s=this.bullets.length-1;s>=0;s--){const o=this.bullets[s];if(this.checkCollision(t,o)){this.enemyBullets.splice(e,1),this.bullets.splice(s,1);break}}}if(this.ship.image){const e=this.selectedShipIndex%this.columns,t=Math.floor(this.selectedShipIndex/this.columns),s=e*this.shipImageWidth,o=t*this.shipImageHeight;this.ctx.drawImage(this.ship.image,s,o,this.shipImageWidth,this.shipImageHeight,this.ship.x-this.ship.width/2,this.ship.y,this.ship.width,this.ship.height)}this.animationFrameId=requestAnimationFrame(this.gameLoop)}},checkCollision(e,t){return e.x+e.width/2>t.x-(t.width||10)/2&&e.x-e.width/2<t.x+(t.width||10)/2&&e.y+e.height/2>t.y-(t.height||20)/2&&e.y-e.height/2<t.y+(t.height||20)/2},startEnemySpawnTimer(){this.enemySpawnInterval=Math.floor(Math.random()*6e3)+5e3,this.enemySpawnTimer=setInterval(this.createEnemy,this.enemySpawnInterval)},stopEnemySpawnTimer(){clearInterval(this.enemySpawnTimer)},loadShipImage(){const e=new Image;e.src=N,e.onload=()=>{this.ship.image=e}},loadResourceImages(){for(const[e,t]of Object.entries(this.images))this.images[e]=new Image,this.images[e].src=t},playShipBullet(){const e=new Audio(F);e.volume=.05,e.play().catch()},async handleAutopilot(){var t,s;this.selectedAutopilot.duration===9999&&(product="autopilot_until2026");let e=(t=this.user)==null?void 0:t.chat;if(!e&&typeof this.getTelegramUser=="function"){const o=this.getTelegramUser();e=o==null?void 0:o.id}if(console.log("user:",this.user),console.log("chat:",e),console.log("getTelegramUser:",typeof this.getTelegramUser=="function"?this.getTelegramUser():null),this.walletAddress||((s=this.user)==null||s.wallet_address),!e){this.autopilotStatus="User is not authorized (no chat id)",this.toast.error("User is not authorized (no chat id)",{timeout:4e3});return}},selectPlan(e){this.selectedPlan=e,this.showAutopilotModal=!0},async activateAutopilot(){var e;if(!(!this.selectedPlan||this.processingPayment)){if(!this.tonKeeperEnabled||!this.walletAddress){this.toast.error("Please connect your TON wallet first!",{timeout:5e3});return}this.processingPayment=!0,this.autopilotStatus="Processing payment...";try{console.log("[AUTOPILOT] Starting autopilot activation:",{plan:this.selectedPlan,walletAddress:this.walletAddress,user:this.user}),(e=this.user)!=null&&e.wallet_address||(console.log("[AUTOPILOT] Saving wallet address..."),await this.saveWalletAddress()),console.log("[AUTOPILOT] Initiating payment...");const t=await this.initiatePayment();if(t.success){console.log("[AUTOPILOT] Payment initiated, verifying...");const s=await this.verifyPayment(t);if(s.success)console.log("[AUTOPILOT] Payment verified, activating autopilot..."),this.activateAutopilotPlan(),this.autopilotStatus=`Plan activated: ${this.selectedPlan.name}`,this.toast.success(`Autopilot activated! x${this.selectedPlan.bonus} efficiency bonus!`,{timeout:5e3}),this.showAutopilotModal=!1,this.selectedPlan=null,console.log("[AUTOPILOT] Autopilot activated successfully!");else throw new Error(s.error||"Payment verification failed")}else throw new Error(t.error||"Payment failed")}catch(t){console.error("[AUTOPILOT] Error activating autopilot:",t),this.autopilotStatus=`Error: ${t.message}`,this.toast.error(`Failed to activate autopilot: ${t.message}`,{timeout:5e3})}finally{this.processingPayment=!1}}},async saveWalletAddress(){var e,t,s,o,i,l,n,r,d,y,v,A,P,O,I,_,E,U;try{if(console.log("[AUTOPILOT] === saveWalletAddress START ==="),console.log("[AUTOPILOT] this.user:",this.user),console.log("[AUTOPILOT] this.user type:",typeof this.user),console.log("[AUTOPILOT] this.user.chat:",(e=this.user)==null?void 0:e.chat),console.log("[AUTOPILOT] this.user.user:",(t=this.user)==null?void 0:t.user),console.log("[AUTOPILOT] this.user.id:",(s=this.user)==null?void 0:s.id),console.log("[AUTOPILOT] this.walletAddress:",this.walletAddress),console.log("[AUTOPILOT] Store state:",(o=this.$store)==null?void 0:o.state),console.log("[AUTOPILOT] Store user:",(l=(i=this.$store)==null?void 0:i.state)==null?void 0:l.user),!this.walletAddress)throw new Error("Wallet address not available. Please connect your TON wallet first.");const p=((n=this.user)==null?void 0:n.chat)||((r=this.user)==null?void 0:r.user)||((d=this.user)==null?void 0:d.id);if(console.log("[AUTOPILOT] Extracted telegramId:",p),console.log("[AUTOPILOT] telegramId type:",typeof p),!p){if(console.log("[AUTOPILOT] No telegramId found, trying to get from Telegram..."),typeof this.getTelegramUser=="function"){const m=this.getTelegramUser();console.log("[AUTOPILOT] Telegram user:",m),m!=null&&m.id&&(console.log("[AUTOPILOT] Using Telegram ID:",m.id),this.user={...this.user,chat:m.id,user:m.id,id:m.id},console.log("[AUTOPILOT] Updated user object:",this.user))}const S=((y=this.user)==null?void 0:y.chat)||((v=this.user)==null?void 0:v.user)||((A=this.user)==null?void 0:A.id);if(!S)throw new Error("Telegram ID not found. Please authorize through Telegram WebApp.");console.log("[AUTOPILOT] Final telegramId:",S)}console.log("[AUTOPILOT] Verifying wallet ownership before saving...");const f=await this.$post("/api/check-wallet-owner",{walletAddress:this.walletAddress,telegramId:p});if(console.log("[AUTOPILOT] Ownership check result:",f),!f.success)throw new Error("Failed to verify wallet ownership");if(!f.isOwner)throw new Error(`This wallet is already connected to another Telegram account (${((P=f.currentOwner)==null?void 0:P.name)||"Unknown user"}). Please use a different wallet or contact support.`);console.log("[AUTOPILOT] User object:",this.user),console.log("[AUTOPILOT] Store user:",(I=(O=this.$store)==null?void 0:O.state)==null?void 0:I.user),console.log("[AUTOPILOT] Telegram ID found:",p),console.log("[AUTOPILOT] Wallet address:",this.walletAddress),console.log("[AUTOPILOT] Saving wallet address:",{telegramId:p,walletAddress:this.walletAddress,userChat:(_=this.user)==null?void 0:_.chat,userUser:(E=this.user)==null?void 0:E.user,userId:(U=this.user)==null?void 0:U.id});const M={telegramId:p,walletAddress:this.walletAddress};console.log("[AUTOPILOT] Request data to API:",M);const w=await this.$post("/api/save-wallet-address",M);if(console.log("[AUTOPILOT] API Response:",w),w.success)this.$store&&this.$store.state.user&&(this.$store.state.user.wallet_address=this.walletAddress),this.user.wallet_address=this.walletAddress,console.log("[AUTOPILOT] Wallet address saved successfully:",this.walletAddress),this.toast&&this.toast.success("Wallet address saved successfully!",{timeout:3e3});else throw new Error(w.error||"Failed to save wallet address")}catch(p){throw console.error("[AUTOPILOT] Error saving wallet address:",p),this.toast&&this.toast.error("Failed to save wallet address: "+p.message,{timeout:5e3}),p}finally{console.log("[AUTOPILOT] === saveWalletAddress END ===")}},async initiatePayment(){var e;try{if(!this.tonConnectUI)throw new Error("TON Connect not available");const t={}.VUE_APP_HOT_WALLET_ADDRESS;if(!t)throw new Error("HOT wallet address not configured");console.log("[AUTOPILOT] Initiating payment:",{recipientAddress:t,amount:this.selectedPlan.price,plan:this.selectedPlan.name});const s=await this.tonConnectUI.sendTransaction({validUntil:Math.floor(Date.now()/1e3)+600,messages:[{address:t,amount:(this.selectedPlan.price*1e9).toString(),comment:`Autopilot: ${this.selectedPlan.name}`}]}),o=((e=s==null?void 0:s.transaction)==null?void 0:e.id)||(s==null?void 0:s.txid)||(s==null?void 0:s.hash);if(!o||o.length!==64)throw new Error("Invalid transaction ID received");return console.log("[AUTOPILOT] Payment initiated, txid:",o),{success:!0,txid:o,amount:this.selectedPlan.price,userAddress:this.walletAddress}}catch(t){return console.error("[AUTOPILOT] Payment initiation error:",t),{success:!1,error:t.message}}},async verifyPayment(e){var t,s,o;try{console.log("[AUTOPILOT] Verifying payment:",e);const i={txHash:e.txid,userAddress:e.userAddress,amount:e.amount,product:`autopilot_${this.selectedPlan.id}`,centaAmount:this.calculateCentaAmount(),telegramId:((t=this.user)==null?void 0:t.chat)||((s=this.user)==null?void 0:s.user)||((o=this.user)==null?void 0:o.id)};console.log("[AUTOPILOT] Verification request data:",i);const l=await this.$post("/api/verify-ton-payment",i);return console.log("[AUTOPILOT] Verification response:",l),l.success?(console.log("[AUTOPILOT] Payment verified successfully"),{success:!0}):(console.error("[AUTOPILOT] Payment verification failed:",l.error),{success:!1,error:l.error||"Verification failed"})}catch(i){return console.error("[AUTOPILOT] Payment verification error:",i),{success:!1,error:i.message}}},calculateCentaAmount(){const e={}.VUE_APP_AUTOPILOT_BASE_CENTA||100,t=this.selectedPlan.bonus,s=e*t;return console.log("[AUTOPILOT] CENTA calculation:",{baseAmount:e,planMultiplier:t,totalAmount:s,plan:this.selectedPlan.name}),s},activateAutopilotPlan(){this.activePlan=this.selectedPlan,this.autopilotActive=!0,this.startAutopilotLogic(),console.log("[AUTOPILOT] Plan activated:",this.selectedPlan)},async connectWallet(){if(console.log("[AUTOPILOT] Starting wallet connection..."),console.log("[AUTOPILOT] TON Connect UI available:",!!this.tonConnectUI),console.log("[AUTOPILOT] Current user:",this.user),console.log("[AUTOPILOT] Environment check:",{hotWallet:{}.VUE_APP_HOT_WALLET_ADDRESS,centaJetton:{}.VUE_APP_CENTA_JETTON_ADDRESS}),!this.tonConnectUI){this.toast.error("TON Connect not available. Please refresh the page or try again later.",{timeout:5e3});return}try{console.log("[AUTOPILOT] Calling tonConnectUI.connectWallet()..."),await this.tonConnectUI.connectWallet(),console.log("[AUTOPILOT] Wallet connected successfully!"),console.log("[AUTOPILOT] Current wallet address:",this.walletAddress),console.log("[AUTOPILOT] TON Connect status:",{isConnected:this.isConnected,walletAddress:this.walletAddress,tonKeeperEnabled:this.tonKeeperEnabled,tonKeeperInitialized:this.tonKeeperInitialized}),this.walletAddress&&await this.checkWalletOwnership(),this.toast.success("Wallet connected successfully!",{timeout:3e3})}catch(e){console.error("[AUTOPILOT] Wallet connection error:",e),this.toast.error("Failed to connect wallet: "+e.message,{timeout:5e3})}},async checkWalletOwnership(){var e;try{if(console.log("[AUTOPILOT] Checking wallet ownership..."),console.log("[AUTOPILOT] Current wallet address:",this.walletAddress),console.log("[AUTOPILOT] Current user:",this.user),!this.walletAddress||!((e=this.user)!=null&&e.chat)){console.log("[AUTOPILOT] Missing wallet address or user ID");return}const t=await this.$post("/api/check-wallet-owner",{walletAddress:this.walletAddress,telegramId:this.user.chat});if(console.log("[AUTOPILOT] Wallet ownership check response:",t),t.success)if(t.isOwner)console.log("[AUTOPILOT] Wallet belongs to current user"),this.toast.success("Wallet verified as yours!",{timeout:3e3});else{console.log("[AUTOPILOT] Wallet belongs to another user"),this.toast.warning("This wallet is already connected to another Telegram account. Please use a different wallet or contact support.",{timeout:8e3}),this.walletAddress=null,this.isConnected=!1,this.tonKeeperEnabled=!1,this.tonKeeperInitialized=!1;return}else console.log("[AUTOPILOT] Wallet ownership check failed:",t.error),this.toast.info("Wallet connected, but ownership verification failed. Proceed with caution.",{timeout:5e3})}catch(t){console.error("[AUTOPILOT] Error checking wallet ownership:",t),this.toast.info("Wallet connected, but ownership verification failed. Proceed with caution.",{timeout:5e3})}},manualWalletInput(){const e=prompt("Please enter your TON wallet address:");e&&e.length>10&&(this.walletAddress=e,this.tonKeeperEnabled=!0,this.tonKeeperInitialized=!0,this.toast.success("Wallet address set manually!",{timeout:3e3}),console.log("[AUTOPILOT] Manual wallet address set:",e))}}};class D{constructor(t,s,o,i,l,n,r=1){this.x=t,this.y=s,this.type=o,this.width=30,this.height=30,this.canvasWidth=i,this.health=l,this.token=n,this.mass=r,this.value=this.calculateValue()}calculateValue(){const t={gold:10819e7,silver:1253e6,copper:9812e3,iron:438e3},s=t[this.type]||t.iron;return Math.round(this.mass*s)}update(t){this.y+=t}draw(t,s){s&&t.drawImage(s,this.x-this.width/2,this.y-this.height/2,this.width,this.height)}takeDamage(t){this.health-=t}}class H{constructor(t,s,o,i,l){this.x=t,this.y=s,this.width=30,this.height=30,this.health=o,this.enemyType=i,this.canvasWidth=l,this.targetX=Math.random()*l,this.speed=1,this.shootInterval=Math.floor(Math.random()*2e3)+1e3,this.lastShotTime=0}update(){Math.abs(this.x-this.targetX)>1?this.x+=(this.targetX-this.x)*.01*this.speed:this.targetX=Math.random()*this.canvasWidth,this.y=Math.min(this.y+1,100),this.y=Math.max(this.y,0)}draw(t,s){s&&t.drawImage(s,this.x-this.width/2,this.y-this.height/2,this.width,this.height)}takeDamage(t){this.health-=t}shoot(t,s){const o=Date.now();if(o-this.lastShotTime>this.shootInterval){this.lastShotTime=o;const i=t-this.x,l=s-this.y,n=Math.atan2(l,i);return{x:this.x,y:this.y+this.height/2,width:10,height:20,dx:Math.cos(n)*3,dy:Math.sin(n)*3}}return null}}const q={id:"app"},Y={ref:"gameCanvas"},X={id:"resources"},J={class:"resource-info"},Z={class:"resource-amount"},Q={class:"resource-value"},j={class:"resource health"},tt={class:"health-info"},et={class:"health-percent"},st={class:"health-bar"},it={key:0,class:"pity-info"},ot={class:"pity-progress"},at={class:"pity-bar"},lt={class:"pity-text"},nt={key:1,class:"daily-info"},rt={class:"daily-progress"},ht={class:"daily-bar"},ct={class:"daily-text"},ut={class:"back"},dt={class:"autopilot-controls"},pt={key:2,class:"autopilot-status"},mt={key:0,class:"plan-info"},gt={key:0,class:"autopilot-modal"},yt={class:"modal-content"},ft={class:"modal-header"},wt={class:"modal-body"},Tt={class:"autopilot-layout"},vt={class:"plans-column"},At={class:"plans-grid"},Pt=["onClick"],Ot={class:"plan-header-compact"},It={class:"plan-price-compact"},_t={class:"plan-bonus-compact"},Et={class:"plan-duration-compact"},Ut={key:0,class:"plan-popular-compact"},Mt={class:"payment-column"},St={key:0,class:"no-plan-selected"},Ct={key:1,class:"plan-selected"},Lt={class:"selected-plan-card"},xt={class:"plan-details"},bt={class:"price"},kt={class:"bonus"},Rt={class:"duration"},Dt={key:0,class:"wallet-section"},Nt={key:1,class:"activation-section"},Wt={class:"wallet-status-compact"},Bt={class:"address"},Gt=["disabled"],Vt={key:1,id:"game-over-screen"};function $t(e,t,s,o,i,l){return u(),c("div",q,[a("canvas",Y,null,512),a("div",X,[(u(!0),c(x,null,b(i.resources,(n,r)=>(u(),c("div",{class:"resource",key:r},[a("div",{class:k("meteor "+r)},null,2),a("div",J,[a("div",Z,h(n.toFixed(2))+" kg",1),a("div",Q,h(l.formatResourceValue(r,n)),1)])]))),128)),a("div",j,[t[8]||(t[8]=a("div",{class:"health-icon"},"❤️",-1)),a("div",tt,[a("div",et,h(i.shipHealthPercent)+"%",1),a("div",st,[a("div",{class:"health-fill",style:T({width:i.shipHealthPercent+"%"})},null,4)])])]),e.pitySystem?(u(),c("div",it,[t[9]||(t[9]=a("div",{class:"pity-title"},"🎯 Pity System",-1)),a("div",ot,[a("div",at,[a("div",{class:"pity-fill",style:T({width:l.getPityProgress()+"%"})},null,4)]),a("div",lt,h(l.getPityText()),1)])])):g("",!0),e.dailyRewards?(u(),c("div",nt,[t[10]||(t[10]=a("div",{class:"daily-title"},"📅 Daily Rewards",-1)),a("div",rt,[a("div",ht,[a("div",{class:"daily-fill",style:T({width:l.getDailyProgress()+"%"})},null,4)]),a("div",ct,h(e.dailyRewards.total.toFixed(2))+"/50 CENTA",1)])])):g("",!0)]),a("div",ut,[a("button",{onClick:t[0]||(t[0]=n=>e.$router.push("/")),class:"back-btn"},h(e.$t("Back")),1)]),a("div",dt,[e.autopilotActive?(u(),c("button",{key:1,onClick:t[2]||(t[2]=(...n)=>l.stopAutopilot&&l.stopAutopilot(...n)),class:"autopilot-btn active"}," 🛑 Stop Autopilot ")):(u(),c("button",{key:0,onClick:t[1]||(t[1]=n=>i.showAutopilotModal=!0),class:"autopilot-btn"}," 🚀 Start Autopilot ")),i.autopilotStatus?(u(),c("div",pt,[V(h(i.autopilotStatus)+" ",1),i.activePlan?(u(),c("div",mt," Plan: "+h(i.activePlan.name)+" | Bonus: x"+h(i.activePlan.bonus),1)):g("",!0)])):g("",!0)]),i.showAutopilotModal?(u(),c("div",gt,[a("div",yt,[a("div",ft,[t[11]||(t[11]=a("h2",null,"🚀 AUTOPILOT IS LIVE!",-1)),a("button",{onClick:t[3]||(t[3]=n=>i.showAutopilotModal=!1),class:"close-btn"},"×")]),a("div",wt,[t[19]||(t[19]=a("p",{class:"modal-description"}," Activate your Centa mining autopilot and earn rewards automatically — no effort, pure gains! 💰⚙️ ",-1)),a("div",Tt,[a("div",vt,[t[12]||(t[12]=a("h3",{class:"plans-title"},"Choose your plan:",-1)),a("div",At,[(u(!0),c(x,null,b(i.autopilotPlans,n=>{var r;return u(),c("div",{key:n.id,onClick:d=>l.selectPlan(n),class:k(["plan-card-compact",{selected:((r=i.selectedPlan)==null?void 0:r.id)===n.id}])},[a("div",Ot,[a("h4",null,h(n.name),1),a("div",It,h(n.price)+" TON",1)]),a("div",_t,"x"+h(n.bonus)+" Bonus",1),a("div",Et,h(n.duration),1),n.popular?(u(),c("div",Ut,"🔥 POPULAR")):g("",!0)],10,Pt)}),128))])]),a("div",Mt,[t[17]||(t[17]=a("h3",{class:"payment-title"},"Payment & Activation",-1)),i.selectedPlan?(u(),c("div",Ct,[a("div",Lt,[a("h4",null,h(i.selectedPlan.name),1),a("div",xt,[a("span",bt,h(i.selectedPlan.price)+" TON",1),a("span",kt,"x"+h(i.selectedPlan.bonus)+" Bonus",1),a("span",Rt,h(i.selectedPlan.duration),1)])]),e.isConnected?(u(),c("div",Nt,[a("div",Wt,[t[16]||(t[16]=a("span",{class:"status"},"✅ Wallet Connected",-1)),a("span",Bt,h(i.walletAddress.slice(0,6))+"..."+h(i.walletAddress.slice(-6)),1)]),a("button",{onClick:t[6]||(t[6]=(...n)=>l.activateAutopilot&&l.activateAutopilot(...n)),disabled:i.processingPayment,class:"activate-btn-compact"},h(i.processingPayment?"Processing...":`🚀 Activate for ${i.selectedPlan.price} TON`),9,Gt)])):(u(),c("div",Dt,[t[14]||(t[14]=a("p",{class:"wallet-info"},"Connect your TON wallet to continue",-1)),t[15]||(t[15]=a("div",{class:"wallet-warning"},[a("p",{class:"warning-text"},"⚠️ Important: One TON wallet can only be connected to one Telegram account at a time."),a("p",{class:"warning-details"},"If you're using the same phone with different Telegram accounts, each account needs its own wallet.")],-1)),a("button",{onClick:t[4]||(t[4]=(...n)=>l.connectWallet&&l.connectWallet(...n)),class:"connect-wallet-btn-compact"}," 🔗 Connect TON Wallet "),a("button",{onClick:t[5]||(t[5]=(...n)=>l.manualWalletInput&&l.manualWalletInput(...n)),class:"manual-wallet-btn-compact"}," 📝 Enter Address Manually ")]))])):(u(),c("div",St,[...t[13]||(t[13]=[a("p",null,"👆 Select a plan from the left to continue",-1)])])),t[18]||(t[18]=a("div",{class:"jackpot-info"},[a("h4",null,"🎁 Jackpot Chances:"),a("ul",null,[a("li",null,"Every 10th buyer: x100 Bonus"),a("li",null,"Every 100th buyer: x500 Bonus"),a("li",null,"Every 1000th buyer: x1000 Bonus")])],-1))])])])])])):g("",!0),i.gameOver?(u(),c("div",Vt,[a("h1",null,h(e.$t("Game over"))+"!",1),a("button",{onClick:t[7]||(t[7]=(...n)=>l.restartGame&&l.restartGame(...n))},h(e.$t("Start again")),1)])):g("",!0)])}const qt=W(K,[["render",$t],["__scopeId","data-v-a19de56e"]]);export{qt as default};
